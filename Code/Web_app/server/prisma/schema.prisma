// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userID        Int            @id @default(autoincrement())
  email         String         @unique @db.Text // Encrypt? nfn
  password      String         @db.Text // Hash
  names         String         @db.Text // Encrypt
  lastNames     String         @db.Text // Encrypt
  roles         String[]       @default(["fencer"])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  administrator Administrator?
  trainer       Trainer?
  fencer        Fencer?
}

model Administrator {
  administratorID Int  @id @default(autoincrement())
  user            User @relation(fields: [userID], references: [userID])
  userID          Int  @unique
}

model Trainer {
  trainerID      Int              @id @default(autoincrement())
  user           User             @relation(fields: [userID], references: [userID])
  userID         Int              @unique
  experience     String           @db.Text // Encrypt
  weapon         String           @db.VarChar(25)
  pictureURL     String?          @db.Text // Encrypt
  weeklyReport   WeeklyReport[]
  singleFeedback SingleFeedback[]
  cycleGoal      CycleGoal[]
  cycleFeedback  CycleFeedback[]
  mesoCycle      MesoCycle[]
  macroCycle     MacroCycle[]
  physicalTest   PhysicalTest[]
  AITraining     AITraining[]
}

model Fencer {
  fencerID                   Int              @id @default(autoincrement())
  user                       User?            @relation(fields: [userID], references: [userID])
  userID                     Int?             @unique
  trainingGroup              TrainingGroup?   @relation(fields: [trainingGroupID], references: [trainingGroupID])
  trainingGroupID            Int?
  idNumber                   String           @db.Text // Encrypt
  emergencyPhone             String           @db.Text // Encrypt
  birthDate                  String           @db.Text // Encrypt // Date
  bloodType                  String           @db.Text // Encrypt
  sex                        String           @db.Text // Encrypt
  school                     String?          @db.Text // Encrypt
  laterality                 String           @db.Text // Encrypt
  phone                      String           @db.Text // Encrypt
  insurance                  String?          @db.Text // Encrypt
  inscriptionDate            String           @db.Text // Encrypt // Date
  startDate                  String?          @db.Text // Encrypt // Date
  occupation                 String           @db.Text // Encrypt
  schedule                   String           @db.Text // Encrypt
  legalGuardian              String?          @db.Text // Encrypt
  legalGuardianPhone         String?          @db.Text // Encrypt
  leadSource                 String           @db.Text // Encrypt
  inscriptionReason          String           @db.Text // Encrypt
  height                     String           @db.Text // Encrypt //Float
  weight                     String           @db.Text // Encrypt //Float
  physicalActivity           String?          @db.Text // Encrypt
  medicalFamily              String           @db.Text // Encrypt
  medicalPersonal            String           @db.Text // Encrypt
  personalMedicalDetails     String?          @db.Text // Encrypt
  weapon                     String           @db.Text // Encrypt
  pictureURL                 String?          @db.Text // Encrypt
  guestName                  String?          @db.Text // Encrypt
  weeklyReport               WeeklyReport[]
  singleFeedback             SingleFeedback[]
  cycleGoal                  CycleGoal[]
  cycleFeedback              CycleFeedback[]
  macroCycle                 MacroCycle[]
  physicalTest               PhysicalTest[]
  attendance                 Attendance[]
  AITraining                 AITraining[]
  trainingCombatFencer1      TrainingCombat[] @relation("fencer1")
  trainingCombatFencer2      TrainingCombat[] @relation("fencer2")
  trainingCombatWinnerFencer TrainingCombat[] @relation("winnerFencer")
}

model WeeklyReport {
  weeklyReportID Int      @id @default(autoincrement())
  fencer         Fencer   @relation(fields: [fencerID], references: [fencerID])
  fencerID       Int
  trainer        Trainer  @relation(fields: [trainerID], references: [trainerID])
  trainerID      Int
  date           DateTime
  content        String   @db.Text
}

model SingleFeedback {
  singleFeedbackID Int      @id @default(autoincrement())
  fencer           Fencer   @relation(fields: [fencerID], references: [fencerID])
  fencerID         Int
  trainer          Trainer  @relation(fields: [trainerID], references: [trainerID])
  trainerID        Int
  date             DateTime
  content          String   @db.Text
}

model TrainingGroup {
  trainingGroupID Int         @id @default(autoincrement())
  name            String      @db.VarChar(25)
  weapon          String      @db.VarChar(25)
  fencer          Fencer[]
  mesoCycle       MesoCycle[]
}

model CycleGoal {
  cycleGoalID Int       @id @default(autoincrement())
  trainer     Trainer   @relation(fields: [trainerID], references: [trainerID])
  trainerID   Int
  fencer      Fencer    @relation(fields: [fencerID], references: [fencerID])
  fencerID    Int
  mesoCycle   MesoCycle @relation(fields: [mesoCycleID], references: [mesoCycleID])
  mesoCycleID Int
  content     String    @db.Text
  date        DateTime
}

model CycleFeedback {
  cycleFeedbackID Int       @id @default(autoincrement())
  trainer         Trainer   @relation(fields: [trainerID], references: [trainerID])
  trainerID       Int
  fencer          Fencer    @relation(fields: [fencerID], references: [fencerID])
  fencerID        Int
  mesoCycle       MesoCycle @relation(fields: [mesoCycleID], references: [mesoCycleID])
  mesoCycleID     Int
  content         String    @db.Text
  date            DateTime
}

model MesoCycle {
  mesoCycleID     Int             @id @default(autoincrement())
  trainingGroup   TrainingGroup   @relation(fields: [trainingGroupID], references: [trainingGroupID])
  trainingGroupID Int
  trainer         Trainer         @relation(fields: [trainerID], references: [trainerID])
  trainerID       Int
  name            String          @db.VarChar(50)
  startDate       DateTime
  endDate         DateTime
  period          String          @db.VarChar(50)
  stage           String          @db.VarChar(100)
  physicalScore   Int             @default(0) @db.SmallInt
  technicalScore  Int             @default(0) @db.SmallInt
  tacticalScore   Int             @default(0) @db.SmallInt
  cycleGoal       CycleGoal[]
  cycleFeedback   CycleFeedback[]
  microCycle      MicroCycle[]
}

model MicroCycle {
  microCycleID             Int         @id @default(autoincrement())
  mesoCycle                MesoCycle   @relation(fields: [mesoCycleID], references: [mesoCycleID])
  mesoCycleID              Int
  startDate                DateTime
  endDate                  DateTime
  speed                    Int?        @default(0) @db.SmallInt
  coordination             Int?        @default(0) @db.SmallInt
  resistance               Int?        @default(0) @db.SmallInt
  strength                 Int?        @default(0) @db.SmallInt
  individualLessons        Int?        @default(0) @db.SmallInt
  groupLessons             Int?        @default(0) @db.SmallInt
  pairWork                 Int?        @default(0) @db.SmallInt
  individualWork           Int?        @default(0) @db.SmallInt
  technicalBasedCombats    Int?        @default(0) @db.SmallInt
  trainingTournament       Int?        @default(0) @db.SmallInt
  freeCombat               Int?        @default(0) @db.SmallInt
  tacticalIndividualLesson Int?        @default(0) @db.SmallInt
  competitionAnalysis      Int?        @default(0) @db.SmallInt
  dailyPlan                DailyPlan[]
}

model DailyPlan {
  dailyPlanID       Int                 @id @default(autoincrement())
  microCycle        MicroCycle          @relation(fields: [microCycleID], references: [microCycleID])
  microCycleID      Int
  date              DateTime
  activityType      ActivityType?       @relation(fields: [activityTypeID], references: [activityTypeID])
  activityTypeID    Int?
  dailyPlanActivity DailyPlanActivity[]
}

model ActivityType {
  activityTypeID Int         @id @default(autoincrement())
  name           String
  dailyPlan      DailyPlan[]
  activity       Activity[]
}

model DailyPlanActivity {
  dailyPlanActivityID Int       @id @default(autoincrement())
  dailyPlan           DailyPlan @relation(fields: [dailyPlanID], references: [dailyPlanID])
  dailyPlanID         Int
  activity            Activity  @relation(fields: [activityID], references: [activityID])
  activityID          Int
}

model Activity {
  activityID        Int                 @id @default(autoincrement())
  name              String              @db.VarChar(25)
  description       String              @db.VarChar(150)
  duration          DateTime
  activityType      ActivityType        @relation(fields: [activityTypeID], references: [activityTypeID])
  activityTypeID    Int
  dailyPlanActivity DailyPlanActivity[]
}

model MacroCycle {
  macroCycleID Int      @id @default(autoincrement())
  fencer       Fencer   @relation(fields: [fencerID], references: [fencerID])
  fencerID     Int
  trainer      Trainer  @relation(fields: [trainerID], references: [trainerID])
  trainerID    Int
  date         DateTime
  results      String   @db.Text
  feedback     String   @db.Text
}

model PhysicalTest {
  physicalTestID Int     @id @default(autoincrement())
  fencer         Fencer  @relation(fields: [fencerID], references: [fencerID])
  fencerID       Int
  trainer        Trainer @relation(fields: [trainerID], references: [trainerID])
  trainerID      Int
  results        String  @db.Text
  feedback       String  @db.Text
}

model TrainingCombat {
  trainingCombatID Int      @id @default(autoincrement())
  fencer1          Fencer   @relation("fencer1", fields: [fencer1ID], references: [fencerID])
  fencer1ID        Int
  fencer2          Fencer   @relation("fencer2", fields: [fencer2ID], references: [fencerID])
  fencer2ID        Int
  fencer1Score     Int      @db.SmallInt
  fencer2Score     Int      @db.SmallInt
  dateTime         DateTime @db.Timestamp()
  winnerFencer     Fencer   @relation("winnerFencer", fields: [winnerFencerID], references: [fencerID])
  winnerFencerID   Int
}

model Attendance {
  attendanceID Int      @id @default(autoincrement())
  fencer       Fencer   @relation(fields: [fencerID], references: [fencerID])
  fencerID     Int
  date         DateTime
  status       String   @db.VarChar(50)
}

model AITraining {
  AITraining    Int             @id @default(autoincrement())
  fencer        Fencer          @relation(fields: [fencerID], references: [fencerID])
  fencerID      Int
  date          DateTime
  duration      DateTime
  feedback      String          @db.Text
  trainer       Trainer         @relation(fields: [trainerID], references: [trainerID])
  trainerID     Int
  trainingError TrainingError[]
}

model RegistrationLink {
  registrationLinkID Int      @id @default(autoincrement())
  expirationDate     DateTime
  valid              Boolean
  email              String   @unique
}

model TrainingError {
  trainingErrorID Int        @id @default(autoincrement())
  AITraining      AITraining @relation(fields: [AITrainingID], references: [AITraining])
  AITrainingID    Int
  error           Error      @relation(fields: [errorID], references: [errorID])
  errorID         Int
  poseData        String     @db.Text
}

model Error {
  errorID       Int             @id @default(autoincrement())
  name          String          @db.VarChar(100)
  description   String          @db.Text
  trainingError TrainingError[]
}
